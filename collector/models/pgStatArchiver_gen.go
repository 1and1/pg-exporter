/*generated by binding gen*/
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

func (r *PgStatArchiver) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	labels := newLabels(labelsKV...)
	// labels

	// optional labels

	// metrics
	// archived_count_total (CounterValue)
	archivedCountTotal := float64(r.ArchivedCount)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `archived_count_total`), `Number of WAL files that have been successfully archived`, nil, labels,
		), prometheus.CounterValue, archivedCountTotal,
	)

	// last_archived_time (CounterValue)
	var lastArchivedTime float64
	if r.LastArchivedTime.IsZero() {
		lastArchivedTime = float64(0)
	} else {
		lastArchivedTime = float64(r.LastArchivedTime.Unix())
	}
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `last_archived_time`), `Time of the last successful archive operation`, nil, labels,
		), prometheus.CounterValue, lastArchivedTime,
	)

	// failed_count_total (CounterValue)
	failedCountTotal := float64(r.FailedCount)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `failed_count_total`), `Number of failed attempts for archiving WAL files`, nil, labels,
		), prometheus.CounterValue, failedCountTotal,
	)

	// last_failed_time (CounterValue)
	var lastFailedTime float64
	if r.LastFailedTime.IsZero() {
		lastFailedTime = float64(0)
	} else {
		lastFailedTime = float64(r.LastFailedTime.Unix())
	}
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `last_failed_time`), `Time of the last failed archival operation`, nil, labels,
		), prometheus.CounterValue, lastFailedTime,
	)

	// stats_reset (CounterValue)
	var statsReset float64
	if r.StatsReset.IsZero() {
		statsReset = float64(0)
	} else {
		statsReset = float64(r.StatsReset.Unix())
	}
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `stats_reset`), `Time at which these statistics were last reset`, nil, labels,
		), prometheus.CounterValue, statsReset,
	)

	// optional metrics

	return nil
}
