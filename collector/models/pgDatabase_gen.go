/*generated by binding gen*/
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

type PgDatabaseSlice []PgDatabase

func (r PgDatabaseSlice) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	for _, row := range []PgDatabase(r) {
		if err := row.ToMetrics(namespace, subsystem, ch, labelsKV...); err != nil {
			return err
		}
	}
	return nil
}

func (r *PgDatabase) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	labels := newLabels(labelsKV...)
	// labels
	labels["database"] = r.Datname

	// optional labels

	// metrics
	// frozen_xid (CounterValue)
	frozenXid := float64(r.FrozenXID)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `frozen_xid`), `All transaction IDs before this one have been replaced with a permanent transaction ID in this database`, nil, labels,
		), prometheus.CounterValue, frozenXid,
	)

	// min_mxid (CounterValue)
	minMxid := float64(r.MinMXID)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `min_mxid`), `All multixact IDs before this one have been replaced with a transaction ID in this database`, nil, labels,
		), prometheus.CounterValue, minMxid,
	)

	// optional metrics

	return nil
}
