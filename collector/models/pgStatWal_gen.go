/*generated by binding gen*/
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

func (r *PgStatWal) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	labels := newLabels(labelsKV...)
	// labels

	// optional labels

	// metrics
	// records_total (CounterValue)
	recordsTotal := float64(r.WalRecords)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `records_total`), `Total number of WAL records generated`, nil, labels,
		), prometheus.CounterValue, recordsTotal,
	)

	// fpi_total (CounterValue)
	fpiTotal := float64(r.WalFpi)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `fpi_total`), `Total number of WAL full page images generated`, nil, labels,
		), prometheus.CounterValue, fpiTotal,
	)

	// bytes_total (CounterValue)
	bytesTotal := float64(r.WalBytes)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `bytes_total`), `Total amount of WAL generated in bytes`, nil, labels,
		), prometheus.CounterValue, bytesTotal,
	)

	// buffers_full_count (CounterValue)
	buffersFullCount := float64(r.WalBuffersFull)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `buffers_full_count`), `Number of times WAL data was written to disk because WAL buffers became full`, nil, labels,
		), prometheus.CounterValue, buffersFullCount,
	)

	// write_count (CounterValue)
	writeCount := float64(r.WalWrite)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `write_count`), `Number of times WAL buffers were written out to disk via XLogWrite request`, nil, labels,
		), prometheus.CounterValue, writeCount,
	)

	// sync_count (CounterValue)
	syncCount := float64(r.WalSync)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `sync_count`), `Number of times WAL files were synced to disk via issue_xlog_fsync request`, nil, labels,
		), prometheus.CounterValue, syncCount,
	)

	// write_time_total (CounterValue)

	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `write_time_total`), `Total amount of time spent writing WAL buffers to disk via XLogWrite request, in milliseconds`, nil, labels,
		), prometheus.CounterValue, r.WalWriteTime,
	)

	// sync_time_total (CounterValue)

	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `sync_time_total`), `Total amount of time spent syncing WAL files to disk via issue_xlog_fsync request, in milliseconds`, nil, labels,
		), prometheus.CounterValue, r.WalSyncTime,
	)

	// stats_reset (CounterValue)
	var statsReset float64
	if r.StatsReset.IsZero() {
		statsReset = float64(0)
	} else {
		statsReset = float64(r.StatsReset.Unix())
	}
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `stats_reset`), `Time at which these statistics were last reset`, nil, labels,
		), prometheus.CounterValue, statsReset,
	)

	// optional metrics

	return nil
}
