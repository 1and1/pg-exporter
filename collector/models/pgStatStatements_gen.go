/*generated by binding gen*/
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

type PgStatStatementsSlice []PgStatStatements

func (r PgStatStatementsSlice) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	for _, row := range []PgStatStatements(r) {
		if err := row.ToMetrics(namespace, subsystem, ch, labelsKV...); err != nil {
			return err
		}
	}
	return nil
}

func (r *PgStatStatements) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	labels := newLabels(labelsKV...)
	// labels
	labels["database"] = r.Datname
	labels["username"] = r.Usename
	labels["query"] = r.Query

	// optional labels

	// metrics
	// calls_total (CounterValue)
	callsTotal := float64(r.Calls)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `calls_total`), `Number of times executed`, nil, labels,
		), prometheus.CounterValue, callsTotal,
	)

	// time_seconds_total (CounterValue)
	timeSecondsTotal := r.TotalTime.Seconds()
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `time_seconds_total`), `Total time spent in the statement, in seconds`, nil, labels,
		), prometheus.CounterValue, timeSecondsTotal,
	)

	// optional metrics
	// time_seconds_mean (GaugeValue)
	if r.MeanTime.Valid {
		timeSecondsMean := r.MeanTime.Seconds()

		ch <- prometheus.MustNewConstMetric(
			prometheus.NewDesc(
				prometheus.BuildFQName(namespace, subsystem, `time_seconds_mean`), `Mean time spent in the statement, in seconds`, nil, labels,
			), prometheus.GaugeValue, timeSecondsMean,
		)
	}

	return nil
}
