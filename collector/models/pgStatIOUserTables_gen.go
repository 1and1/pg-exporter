/*generated by binding gen*/
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

type PgStatIOUserTablesSlice []PgStatIOUserTables

func (r PgStatIOUserTablesSlice) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	for _, row := range []PgStatIOUserTables(r) {
		if err := row.ToMetrics(namespace, subsystem, ch, labelsKV...); err != nil {
			return err
		}
	}
	return nil
}

func (r *PgStatIOUserTables) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	labels := newLabels(labelsKV...)
	// labels
	labels["schema"] = r.SchemaName
	labels["table"] = r.Relname

	// optional labels

	// metrics
	// heap_blocks_read_total (CounterValue)
	heapBlocksReadTotal := float64(r.HeapBlksRead)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `heap_blocks_read_total`), `Number of disk blocks read from this table`, nil, labels,
		), prometheus.CounterValue, heapBlocksReadTotal,
	)

	// heap_blocks_hit_total (CounterValue)
	heapBlocksHitTotal := float64(r.HeapBlksHit)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `heap_blocks_hit_total`), `Number of buffer hits in this table`, nil, labels,
		), prometheus.CounterValue, heapBlocksHitTotal,
	)

	// index_blocks_read_total (CounterValue)
	indexBlocksReadTotal := float64(r.IdxBlksRead)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `index_blocks_read_total`), `Number of disk blocks read from all indexes on this table`, nil, labels,
		), prometheus.CounterValue, indexBlocksReadTotal,
	)

	// index_blocks_hit_total (CounterValue)
	indexBlocksHitTotal := float64(r.IdxBlksHit)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `index_blocks_hit_total`), `Number of buffer hits in all indexes on this table`, nil, labels,
		), prometheus.CounterValue, indexBlocksHitTotal,
	)

	// toast_blocks_read_total (CounterValue)
	toastBlocksReadTotal := float64(r.ToastBlksRead)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `toast_blocks_read_total`), `Number of disk blocks read from this table's TOAST table`, nil, labels,
		), prometheus.CounterValue, toastBlocksReadTotal,
	)

	// toast_blocks_hit_total (CounterValue)
	toastBlocksHitTotal := float64(r.ToastBlksHit)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `toast_blocks_hit_total`), `Number of buffer hits in this table's TOAST table`, nil, labels,
		), prometheus.CounterValue, toastBlocksHitTotal,
	)

	// toast_index_blocks_read_total (CounterValue)
	toastIndexBlocksReadTotal := float64(r.TIDXBlksRead)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `toast_index_blocks_read_total`), `Number of disk blocks read from this table's TOAST table indexes`, nil, labels,
		), prometheus.CounterValue, toastIndexBlocksReadTotal,
	)

	// toast_index_blocks_hit_total (CounterValue)
	toastIndexBlocksHitTotal := float64(r.TIDXBlksHit)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `toast_index_blocks_hit_total`), `Number of buffer hits in this table's TOAST table indexes`, nil, labels,
		), prometheus.CounterValue, toastIndexBlocksHitTotal,
	)

	// optional metrics

	return nil
}
