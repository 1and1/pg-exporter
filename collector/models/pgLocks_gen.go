/*generated by binding gen*/
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

type PgLocksSlice []PgLocks

func (r PgLocksSlice) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	for _, row := range []PgLocks(r) {
		if err := row.ToMetrics(namespace, subsystem, ch, labelsKV...); err != nil {
			return err
		}
	}
	return nil
}

func (r *PgLocks) ToMetrics(namespace string, subsystem string, ch chan<- prometheus.Metric, labelsKV ...string) error {
	labels := newLabels(labelsKV...)
	// labels

	// optional labels
	if r.Locktype.Valid {
		labels["locktype"] = r.Locktype.String
	}
	if r.ScopeType.Valid {
		labels["scope_type"] = r.ScopeType.String
	}
	if r.Database.Valid {
		labels["database"] = r.Database.String
	}
	if r.Mode.Valid {
		labels["mode"] = r.Mode.String
	}
	if r.Granted.Valid {
		if r.Granted.Bool {
			labels["granted"] = "true"
		} else {
			labels["granted"] = "false"
		}
	}

	// metrics
	// count (GaugeValue)
	count := float64(r.Locks)
	ch <- prometheus.MustNewConstMetric(
		prometheus.NewDesc(
			prometheus.BuildFQName(namespace, subsystem, `count`), `Number of locks per state`, nil, labels,
		), prometheus.GaugeValue, count,
	)

	// optional metrics

	return nil
}
